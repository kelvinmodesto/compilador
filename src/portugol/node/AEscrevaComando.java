/* This file was generated by SableCC (http://www.sablecc.org/). */

package src.portugol.node;

import src.portugol.analysis.*;

@SuppressWarnings("nls")
public final class AEscrevaComando extends PComando
{
    private TCEscreva _cEscreva_;
    private TAPar _aPar_;
    private PExpressaoLista _expressaoLista_;
    private TFPar _fPar_;

    public AEscrevaComando()
    {
        // Constructor
    }

    public AEscrevaComando(
        @SuppressWarnings("hiding") TCEscreva _cEscreva_,
        @SuppressWarnings("hiding") TAPar _aPar_,
        @SuppressWarnings("hiding") PExpressaoLista _expressaoLista_,
        @SuppressWarnings("hiding") TFPar _fPar_)
    {
        // Constructor
        setCEscreva(_cEscreva_);

        setAPar(_aPar_);

        setExpressaoLista(_expressaoLista_);

        setFPar(_fPar_);

    }

    @Override
    public Object clone()
    {
        return new AEscrevaComando(
            cloneNode(this._cEscreva_),
            cloneNode(this._aPar_),
            cloneNode(this._expressaoLista_),
            cloneNode(this._fPar_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAEscrevaComando(this);
    }

    public TCEscreva getCEscreva()
    {
        return this._cEscreva_;
    }

    public void setCEscreva(TCEscreva node)
    {
        if(this._cEscreva_ != null)
        {
            this._cEscreva_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._cEscreva_ = node;
    }

    public TAPar getAPar()
    {
        return this._aPar_;
    }

    public void setAPar(TAPar node)
    {
        if(this._aPar_ != null)
        {
            this._aPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._aPar_ = node;
    }

    public PExpressaoLista getExpressaoLista()
    {
        return this._expressaoLista_;
    }

    public void setExpressaoLista(PExpressaoLista node)
    {
        if(this._expressaoLista_ != null)
        {
            this._expressaoLista_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expressaoLista_ = node;
    }

    public TFPar getFPar()
    {
        return this._fPar_;
    }

    public void setFPar(TFPar node)
    {
        if(this._fPar_ != null)
        {
            this._fPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._fPar_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._cEscreva_)
            + toString(this._aPar_)
            + toString(this._expressaoLista_)
            + toString(this._fPar_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._cEscreva_ == child)
        {
            this._cEscreva_ = null;
            return;
        }

        if(this._aPar_ == child)
        {
            this._aPar_ = null;
            return;
        }

        if(this._expressaoLista_ == child)
        {
            this._expressaoLista_ = null;
            return;
        }

        if(this._fPar_ == child)
        {
            this._fPar_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._cEscreva_ == oldChild)
        {
            setCEscreva((TCEscreva) newChild);
            return;
        }

        if(this._aPar_ == oldChild)
        {
            setAPar((TAPar) newChild);
            return;
        }

        if(this._expressaoLista_ == oldChild)
        {
            setExpressaoLista((PExpressaoLista) newChild);
            return;
        }

        if(this._fPar_ == oldChild)
        {
            setFPar((TFPar) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
