/* This file was generated by SableCC (http://www.sablecc.org/). */

package portugol.node;

import java.util.*;
import portugol.analysis.*;

@SuppressWarnings("nls")
public final class AEscreva extends PEscreva
{
    private TCEscreva _cEscreva_;
    private TAPar _aPar_;
    private PExpressao _expressao_;
    private final LinkedList<PMaisExpressao> _maisExpressao_ = new LinkedList<PMaisExpressao>();
    private TFPar _fPar_;
    private TPontoVirgula _pontoVirgula_;

    public AEscreva()
    {
        // Constructor
    }

    public AEscreva(
        @SuppressWarnings("hiding") TCEscreva _cEscreva_,
        @SuppressWarnings("hiding") TAPar _aPar_,
        @SuppressWarnings("hiding") PExpressao _expressao_,
        @SuppressWarnings("hiding") List<?> _maisExpressao_,
        @SuppressWarnings("hiding") TFPar _fPar_,
        @SuppressWarnings("hiding") TPontoVirgula _pontoVirgula_)
    {
        // Constructor
        setCEscreva(_cEscreva_);

        setAPar(_aPar_);

        setExpressao(_expressao_);

        setMaisExpressao(_maisExpressao_);

        setFPar(_fPar_);

        setPontoVirgula(_pontoVirgula_);

    }

    @Override
    public Object clone()
    {
        return new AEscreva(
            cloneNode(this._cEscreva_),
            cloneNode(this._aPar_),
            cloneNode(this._expressao_),
            cloneList(this._maisExpressao_),
            cloneNode(this._fPar_),
            cloneNode(this._pontoVirgula_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAEscreva(this);
    }

    public TCEscreva getCEscreva()
    {
        return this._cEscreva_;
    }

    public void setCEscreva(TCEscreva node)
    {
        if(this._cEscreva_ != null)
        {
            this._cEscreva_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._cEscreva_ = node;
    }

    public TAPar getAPar()
    {
        return this._aPar_;
    }

    public void setAPar(TAPar node)
    {
        if(this._aPar_ != null)
        {
            this._aPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._aPar_ = node;
    }

    public PExpressao getExpressao()
    {
        return this._expressao_;
    }

    public void setExpressao(PExpressao node)
    {
        if(this._expressao_ != null)
        {
            this._expressao_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expressao_ = node;
    }

    public LinkedList<PMaisExpressao> getMaisExpressao()
    {
        return this._maisExpressao_;
    }

    public void setMaisExpressao(List<?> list)
    {
        for(PMaisExpressao e : this._maisExpressao_)
        {
            e.parent(null);
        }
        this._maisExpressao_.clear();

        for(Object obj_e : list)
        {
            PMaisExpressao e = (PMaisExpressao) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._maisExpressao_.add(e);
        }
    }

    public TFPar getFPar()
    {
        return this._fPar_;
    }

    public void setFPar(TFPar node)
    {
        if(this._fPar_ != null)
        {
            this._fPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._fPar_ = node;
    }

    public TPontoVirgula getPontoVirgula()
    {
        return this._pontoVirgula_;
    }

    public void setPontoVirgula(TPontoVirgula node)
    {
        if(this._pontoVirgula_ != null)
        {
            this._pontoVirgula_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pontoVirgula_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._cEscreva_)
            + toString(this._aPar_)
            + toString(this._expressao_)
            + toString(this._maisExpressao_)
            + toString(this._fPar_)
            + toString(this._pontoVirgula_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._cEscreva_ == child)
        {
            this._cEscreva_ = null;
            return;
        }

        if(this._aPar_ == child)
        {
            this._aPar_ = null;
            return;
        }

        if(this._expressao_ == child)
        {
            this._expressao_ = null;
            return;
        }

        if(this._maisExpressao_.remove(child))
        {
            return;
        }

        if(this._fPar_ == child)
        {
            this._fPar_ = null;
            return;
        }

        if(this._pontoVirgula_ == child)
        {
            this._pontoVirgula_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._cEscreva_ == oldChild)
        {
            setCEscreva((TCEscreva) newChild);
            return;
        }

        if(this._aPar_ == oldChild)
        {
            setAPar((TAPar) newChild);
            return;
        }

        if(this._expressao_ == oldChild)
        {
            setExpressao((PExpressao) newChild);
            return;
        }

        for(ListIterator<PMaisExpressao> i = this._maisExpressao_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PMaisExpressao) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._fPar_ == oldChild)
        {
            setFPar((TFPar) newChild);
            return;
        }

        if(this._pontoVirgula_ == oldChild)
        {
            setPontoVirgula((TPontoVirgula) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
