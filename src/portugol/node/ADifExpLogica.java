/* This file was generated by SableCC (http://www.sablecc.org/). */

package portugol.node;

import portugol.analysis.*;

@SuppressWarnings("nls")
public final class ADifExpLogica extends PExpLogica
{
    private PExpressao _exp1_;
    private TDif _dif_;
    private PExpressao _exp2_;

    public ADifExpLogica()
    {
        // Constructor
    }

    public ADifExpLogica(
        @SuppressWarnings("hiding") PExpressao _exp1_,
        @SuppressWarnings("hiding") TDif _dif_,
        @SuppressWarnings("hiding") PExpressao _exp2_)
    {
        // Constructor
        setExp1(_exp1_);

        setDif(_dif_);

        setExp2(_exp2_);

    }

    @Override
    public Object clone()
    {
        return new ADifExpLogica(
            cloneNode(this._exp1_),
            cloneNode(this._dif_),
            cloneNode(this._exp2_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADifExpLogica(this);
    }

    public PExpressao getExp1()
    {
        return this._exp1_;
    }

    public void setExp1(PExpressao node)
    {
        if(this._exp1_ != null)
        {
            this._exp1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp1_ = node;
    }

    public TDif getDif()
    {
        return this._dif_;
    }

    public void setDif(TDif node)
    {
        if(this._dif_ != null)
        {
            this._dif_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dif_ = node;
    }

    public PExpressao getExp2()
    {
        return this._exp2_;
    }

    public void setExp2(PExpressao node)
    {
        if(this._exp2_ != null)
        {
            this._exp2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp2_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._exp1_)
            + toString(this._dif_)
            + toString(this._exp2_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._exp1_ == child)
        {
            this._exp1_ = null;
            return;
        }

        if(this._dif_ == child)
        {
            this._dif_ = null;
            return;
        }

        if(this._exp2_ == child)
        {
            this._exp2_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._exp1_ == oldChild)
        {
            setExp1((PExpressao) newChild);
            return;
        }

        if(this._dif_ == oldChild)
        {
            setDif((TDif) newChild);
            return;
        }

        if(this._exp2_ == oldChild)
        {
            setExp2((PExpressao) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
