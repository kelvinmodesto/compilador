/* This file was generated by SableCC (http://www.sablecc.org/). */

package portugol.node;

import portugol.analysis.*;

@SuppressWarnings("nls")
public final class ALeiaComando extends PComando
{
    private TCLeia _cLeia_;
    private TAPar _aPar_;
    private PVarLista _varLista_;
    private TFPar _fPar_;

    public ALeiaComando()
    {
        // Constructor
    }

    public ALeiaComando(
        @SuppressWarnings("hiding") TCLeia _cLeia_,
        @SuppressWarnings("hiding") TAPar _aPar_,
        @SuppressWarnings("hiding") PVarLista _varLista_,
        @SuppressWarnings("hiding") TFPar _fPar_)
    {
        // Constructor
        setCLeia(_cLeia_);

        setAPar(_aPar_);

        setVarLista(_varLista_);

        setFPar(_fPar_);

    }

    @Override
    public Object clone()
    {
        return new ALeiaComando(
            cloneNode(this._cLeia_),
            cloneNode(this._aPar_),
            cloneNode(this._varLista_),
            cloneNode(this._fPar_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALeiaComando(this);
    }

    public TCLeia getCLeia()
    {
        return this._cLeia_;
    }

    public void setCLeia(TCLeia node)
    {
        if(this._cLeia_ != null)
        {
            this._cLeia_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._cLeia_ = node;
    }

    public TAPar getAPar()
    {
        return this._aPar_;
    }

    public void setAPar(TAPar node)
    {
        if(this._aPar_ != null)
        {
            this._aPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._aPar_ = node;
    }

    public PVarLista getVarLista()
    {
        return this._varLista_;
    }

    public void setVarLista(PVarLista node)
    {
        if(this._varLista_ != null)
        {
            this._varLista_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._varLista_ = node;
    }

    public TFPar getFPar()
    {
        return this._fPar_;
    }

    public void setFPar(TFPar node)
    {
        if(this._fPar_ != null)
        {
            this._fPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._fPar_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._cLeia_)
            + toString(this._aPar_)
            + toString(this._varLista_)
            + toString(this._fPar_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._cLeia_ == child)
        {
            this._cLeia_ = null;
            return;
        }

        if(this._aPar_ == child)
        {
            this._aPar_ = null;
            return;
        }

        if(this._varLista_ == child)
        {
            this._varLista_ = null;
            return;
        }

        if(this._fPar_ == child)
        {
            this._fPar_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._cLeia_ == oldChild)
        {
            setCLeia((TCLeia) newChild);
            return;
        }

        if(this._aPar_ == oldChild)
        {
            setAPar((TAPar) newChild);
            return;
        }

        if(this._varLista_ == oldChild)
        {
            setVarLista((PVarLista) newChild);
            return;
        }

        if(this._fPar_ == oldChild)
        {
            setFPar((TFPar) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
