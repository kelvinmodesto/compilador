/* This file was generated by SableCC (http://www.sablecc.org/). */

package portugol.parser;

import portugol.lexer.*;
import portugol.node.*;
import portugol.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PPrograma node1 = (PPrograma) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce APrograma */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce ACabecalho */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list, false);
            }
            break;
            case 2: /* reduce AAdeclaracao1Declaracao */
            {
                ArrayList<Object> list = new2();
                push(goTo(2), list, false);
            }
            break;
            case 3: /* reduce AAdeclaracao2Declaracao */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list, false);
            }
            break;
            case 4: /* reduce AAdeclaracao3Declaracao */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list, false);
            }
            break;
            case 5: /* reduce AAdeclaracao4Declaracao */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list, false);
            }
            break;
            case 6: /* reduce AVarDeclaracao */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list, false);
            }
            break;
            case 7: /* reduce ARealTipo */
            {
                ArrayList<Object> list = new7();
                push(goTo(4), list, false);
            }
            break;
            case 8: /* reduce AInteiroTipo */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list, false);
            }
            break;
            case 9: /* reduce ACaractereTipo */
            {
                ArrayList<Object> list = new9();
                push(goTo(4), list, false);
            }
            break;
            case 10: /* reduce AUnicaVarLista */
            {
                ArrayList<Object> list = new10();
                push(goTo(5), list, false);
            }
            break;
            case 11: /* reduce AListaVarLista */
            {
                ArrayList<Object> list = new11();
                push(goTo(5), list, false);
            }
            break;
            case 12: /* reduce ASimplesVar */
            {
                ArrayList<Object> list = new12();
                push(goTo(6), list, false);
            }
            break;
            case 13: /* reduce AVetorVar */
            {
                ArrayList<Object> list = new13();
                push(goTo(6), list, false);
            }
            break;
            case 14: /* reduce AConstDeclaracao */
            {
                ArrayList<Object> list = new14();
                push(goTo(7), list, false);
            }
            break;
            case 15: /* reduce AStringValor */
            {
                ArrayList<Object> list = new15();
                push(goTo(8), list, false);
            }
            break;
            case 16: /* reduce AInteiroValor */
            {
                ArrayList<Object> list = new16();
                push(goTo(8), list, false);
            }
            break;
            case 17: /* reduce ARealValor */
            {
                ArrayList<Object> list = new17();
                push(goTo(8), list, false);
            }
            break;
            case 18: /* reduce ACorpo */
            {
                ArrayList<Object> list = new18();
                push(goTo(9), list, false);
            }
            break;
            case 19: /* reduce AVazioComandoLista */
            {
                ArrayList<Object> list = new19();
                push(goTo(10), list, false);
            }
            break;
            case 20: /* reduce AUnicoComandoLista */
            {
                ArrayList<Object> list = new20();
                push(goTo(10), list, false);
            }
            break;
            case 21: /* reduce AListaComandoLista */
            {
                ArrayList<Object> list = new21();
                push(goTo(10), list, false);
            }
            break;
            case 22: /* reduce AAtribuicaoComando */
            {
                ArrayList<Object> list = new22();
                push(goTo(11), list, false);
            }
            break;
            case 23: /* reduce ALeiaComando */
            {
                ArrayList<Object> list = new23();
                push(goTo(11), list, false);
            }
            break;
            case 24: /* reduce AEscrevaComando */
            {
                ArrayList<Object> list = new24();
                push(goTo(11), list, false);
            }
            break;
            case 25: /* reduce AUnicaExpressaoLista */
            {
                ArrayList<Object> list = new25();
                push(goTo(12), list, false);
            }
            break;
            case 26: /* reduce ASequenciaExpressaoLista */
            {
                ArrayList<Object> list = new26();
                push(goTo(12), list, false);
            }
            break;
            case 27: /* reduce ATermoExpressao */
            {
                ArrayList<Object> list = new27();
                push(goTo(13), list, false);
            }
            break;
            case 28: /* reduce ASomaExpressao */
            {
                ArrayList<Object> list = new28();
                push(goTo(13), list, false);
            }
            break;
            case 29: /* reduce ASubExpressao */
            {
                ArrayList<Object> list = new29();
                push(goTo(13), list, false);
            }
            break;
            case 30: /* reduce AFatorTermo */
            {
                ArrayList<Object> list = new30();
                push(goTo(14), list, false);
            }
            break;
            case 31: /* reduce AMultTermo */
            {
                ArrayList<Object> list = new31();
                push(goTo(14), list, false);
            }
            break;
            case 32: /* reduce ADivTermo */
            {
                ArrayList<Object> list = new32();
                push(goTo(14), list, false);
            }
            break;
            case 33: /* reduce AIdFator */
            {
                ArrayList<Object> list = new33();
                push(goTo(15), list, false);
            }
            break;
            case 34: /* reduce AInteiroFator */
            {
                ArrayList<Object> list = new34();
                push(goTo(15), list, false);
            }
            break;
            case 35: /* reduce ARealFator */
            {
                ArrayList<Object> list = new35();
                push(goTo(15), list, false);
            }
            break;
            case 36: /* reduce AParentesesFator */
            {
                ArrayList<Object> list = new36();
                push(goTo(15), list, false);
            }
            break;
            case 37: /* reduce ATerminal$VarDeclaracao */
            {
                ArrayList<Object> list = new37();
                push(goTo(16), list, true);
            }
            break;
            case 38: /* reduce ANonTerminal$VarDeclaracao */
            {
                ArrayList<Object> list = new38();
                push(goTo(16), list, true);
            }
            break;
            case 39: /* reduce ATerminal$ConstDeclaracao */
            {
                ArrayList<Object> list = new39();
                push(goTo(17), list, true);
            }
            break;
            case 40: /* reduce ANonTerminal$ConstDeclaracao */
            {
                ArrayList<Object> list = new40();
                push(goTo(17), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce APrograma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        PCabecalho pcabecalhoNode2;
        PDeclaracao pdeclaracaoNode3;
        PCorpo pcorpoNode4;
        TCFim tcfimNode5;
        TPonto tpontoNode6;
        pcabecalhoNode2 = (PCabecalho)nodeArrayList1.get(0);
        pdeclaracaoNode3 = (PDeclaracao)nodeArrayList2.get(0);
        pcorpoNode4 = (PCorpo)nodeArrayList3.get(0);
        tcfimNode5 = (TCFim)nodeArrayList4.get(0);
        tpontoNode6 = (TPonto)nodeArrayList5.get(0);

        pprogramaNode1 = new APrograma(pcabecalhoNode2, pdeclaracaoNode3, pcorpoNode4, tcfimNode5, tpontoNode6);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce ACabecalho */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCabecalho pcabecalhoNode1;
        {
            // Block
        TCPrograma tcprogramaNode2;
        TId tidNode3;
        TCInicio tcinicioNode4;
        tcprogramaNode2 = (TCPrograma)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tcinicioNode4 = (TCInicio)nodeArrayList3.get(0);

        pcabecalhoNode1 = new ACabecalho(tcprogramaNode2, tidNode3, tcinicioNode4);
        }
	nodeList.add(pcabecalhoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAdeclaracao1Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        }

        pdeclaracaoNode1 = new ADeclaracao(listNode2, listNode3);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAdeclaracao2Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        }

        pdeclaracaoNode1 = new ADeclaracao(listNode3, listNode4);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAdeclaracao3Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList1.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pdeclaracaoNode1 = new ADeclaracao(listNode2, listNode4);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAdeclaracao4Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pdeclaracaoNode1 = new ADeclaracao(listNode3, listNode5);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AVarDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDeclaracao pvardeclaracaoNode1;
        {
            // Block
        PTipo ptipoNode2;
        TDoisPontos tdoispontosNode3;
        PVarLista pvarlistaNode4;
        TPontoVirgula tpontovirgulaNode5;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        tdoispontosNode3 = (TDoisPontos)nodeArrayList2.get(0);
        pvarlistaNode4 = (PVarLista)nodeArrayList3.get(0);
        tpontovirgulaNode5 = (TPontoVirgula)nodeArrayList4.get(0);

        pvardeclaracaoNode1 = new AVarDeclaracao(ptipoNode2, tdoispontosNode3, pvarlistaNode4, tpontovirgulaNode5);
        }
	nodeList.add(pvardeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ARealTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TCReal tcrealNode2;
        tcrealNode2 = (TCReal)nodeArrayList1.get(0);

        ptipoNode1 = new ARealTipo(tcrealNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AInteiroTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TCInteiro tcinteiroNode2;
        tcinteiroNode2 = (TCInteiro)nodeArrayList1.get(0);

        ptipoNode1 = new AInteiroTipo(tcinteiroNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce ACaractereTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TCCaractere tccaractereNode2;
        tccaractereNode2 = (TCCaractere)nodeArrayList1.get(0);

        ptipoNode1 = new ACaractereTipo(tccaractereNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AUnicaVarLista */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarLista pvarlistaNode1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList1.get(0);

        pvarlistaNode1 = new AUnicaVarLista(pvarNode2);
        }
	nodeList.add(pvarlistaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AListaVarLista */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarLista pvarlistaNode1;
        {
            // Block
        PVarLista pvarlistaNode2;
        TVirgula tvirgulaNode3;
        PVar pvarNode4;
        pvarlistaNode2 = (PVarLista)nodeArrayList1.get(0);
        tvirgulaNode3 = (TVirgula)nodeArrayList2.get(0);
        pvarNode4 = (PVar)nodeArrayList3.get(0);

        pvarlistaNode1 = new AListaVarLista(pvarlistaNode2, tvirgulaNode3, pvarNode4);
        }
	nodeList.add(pvarlistaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ASimplesVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pvarNode1 = new ASimplesVar(tidNode2);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AVetorVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TId tidNode2;
        TACol tacolNode3;
        TInteiro tinteiroNode4;
        TFCol tfcolNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tacolNode3 = (TACol)nodeArrayList2.get(0);
        tinteiroNode4 = (TInteiro)nodeArrayList3.get(0);
        tfcolNode5 = (TFCol)nodeArrayList4.get(0);

        pvarNode1 = new AVetorVar(tidNode2, tacolNode3, tinteiroNode4, tfcolNode5);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AConstDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConstDeclaracao pconstdeclaracaoNode1;
        {
            // Block
        TCConst tcconstNode2;
        TId tidNode3;
        PValor pvalorNode4;
        TPontoVirgula tpontovirgulaNode5;
        tcconstNode2 = (TCConst)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        pvalorNode4 = (PValor)nodeArrayList3.get(0);
        tpontovirgulaNode5 = (TPontoVirgula)nodeArrayList4.get(0);

        pconstdeclaracaoNode1 = new AConstDeclaracao(tcconstNode2, tidNode3, pvalorNode4, tpontovirgulaNode5);
        }
	nodeList.add(pconstdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AStringValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        pvalorNode1 = new AStringValor(tstringNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AInteiroValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TInteiro tinteiroNode2;
        tinteiroNode2 = (TInteiro)nodeArrayList1.get(0);

        pvalorNode1 = new AInteiroValor(tinteiroNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce ARealValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TReal trealNode2;
        trealNode2 = (TReal)nodeArrayList1.get(0);

        pvalorNode1 = new ARealValor(trealNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce ACorpo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCorpo pcorpoNode1;
        {
            // Block
        PComandoLista pcomandolistaNode2;
        pcomandolistaNode2 = (PComandoLista)nodeArrayList1.get(0);

        pcorpoNode1 = new ACorpo(pcomandolistaNode2);
        }
	nodeList.add(pcorpoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AVazioComandoLista */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PComandoLista pcomandolistaNode1;
        {
            // Block

        pcomandolistaNode1 = new AVazioComandoLista();
        }
	nodeList.add(pcomandolistaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AUnicoComandoLista */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoLista pcomandolistaNode1;
        {
            // Block
        PComando pcomandoNode2;
        TPontoVirgula tpontovirgulaNode3;
        pcomandoNode2 = (PComando)nodeArrayList1.get(0);
        tpontovirgulaNode3 = (TPontoVirgula)nodeArrayList2.get(0);

        pcomandolistaNode1 = new AUnicoComandoLista(pcomandoNode2, tpontovirgulaNode3);
        }
	nodeList.add(pcomandolistaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AListaComandoLista */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoLista pcomandolistaNode1;
        {
            // Block
        PComandoLista pcomandolistaNode2;
        TPontoVirgula tpontovirgulaNode3;
        PComando pcomandoNode4;
        TPontoVirgula tpontovirgulaNode5;
        pcomandolistaNode2 = (PComandoLista)nodeArrayList1.get(0);
        tpontovirgulaNode3 = (TPontoVirgula)nodeArrayList2.get(0);
        pcomandoNode4 = (PComando)nodeArrayList3.get(0);
        tpontovirgulaNode5 = (TPontoVirgula)nodeArrayList4.get(0);

        pcomandolistaNode1 = new AListaComandoLista(pcomandolistaNode2, tpontovirgulaNode3, pcomandoNode4, tpontovirgulaNode5);
        }
	nodeList.add(pcomandolistaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AAtribuicaoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TId tidNode2;
        TSeta tsetaNode3;
        PExpressao pexpressaoNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tsetaNode3 = (TSeta)nodeArrayList2.get(0);
        pexpressaoNode4 = (PExpressao)nodeArrayList3.get(0);

        pcomandoNode1 = new AAtribuicaoComando(tidNode2, tsetaNode3, pexpressaoNode4);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ALeiaComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TCLeia tcleiaNode2;
        TAPar taparNode3;
        PVarLista pvarlistaNode4;
        TFPar tfparNode5;
        tcleiaNode2 = (TCLeia)nodeArrayList1.get(0);
        taparNode3 = (TAPar)nodeArrayList2.get(0);
        pvarlistaNode4 = (PVarLista)nodeArrayList3.get(0);
        tfparNode5 = (TFPar)nodeArrayList4.get(0);

        pcomandoNode1 = new ALeiaComando(tcleiaNode2, taparNode3, pvarlistaNode4, tfparNode5);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AEscrevaComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TCEscreva tcescrevaNode2;
        TAPar taparNode3;
        PExpressaoLista pexpressaolistaNode4;
        TFPar tfparNode5;
        tcescrevaNode2 = (TCEscreva)nodeArrayList1.get(0);
        taparNode3 = (TAPar)nodeArrayList2.get(0);
        pexpressaolistaNode4 = (PExpressaoLista)nodeArrayList3.get(0);
        tfparNode5 = (TFPar)nodeArrayList4.get(0);

        pcomandoNode1 = new AEscrevaComando(tcescrevaNode2, taparNode3, pexpressaolistaNode4, tfparNode5);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AUnicaExpressaoLista */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoLista pexpressaolistaNode1;
        {
            // Block
        PExpressao pexpressaoNode2;
        pexpressaoNode2 = (PExpressao)nodeArrayList1.get(0);

        pexpressaolistaNode1 = new AUnicaExpressaoLista(pexpressaoNode2);
        }
	nodeList.add(pexpressaolistaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce ASequenciaExpressaoLista */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoLista pexpressaolistaNode1;
        {
            // Block
        PExpressaoLista pexpressaolistaNode2;
        TVirgula tvirgulaNode3;
        PExpressao pexpressaoNode4;
        pexpressaolistaNode2 = (PExpressaoLista)nodeArrayList1.get(0);
        tvirgulaNode3 = (TVirgula)nodeArrayList2.get(0);
        pexpressaoNode4 = (PExpressao)nodeArrayList3.get(0);

        pexpressaolistaNode1 = new ASequenciaExpressaoLista(pexpressaolistaNode2, tvirgulaNode3, pexpressaoNode4);
        }
	nodeList.add(pexpressaolistaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce ATermoExpressao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressao pexpressaoNode1;
        {
            // Block
        PTermo ptermoNode2;
        ptermoNode2 = (PTermo)nodeArrayList1.get(0);

        pexpressaoNode1 = new ATermoExpressao(ptermoNode2);
        }
	nodeList.add(pexpressaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ASomaExpressao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressao pexpressaoNode1;
        {
            // Block
        PExpressao pexpressaoNode2;
        TSoma tsomaNode3;
        PTermo ptermoNode4;
        pexpressaoNode2 = (PExpressao)nodeArrayList1.get(0);
        tsomaNode3 = (TSoma)nodeArrayList2.get(0);
        ptermoNode4 = (PTermo)nodeArrayList3.get(0);

        pexpressaoNode1 = new ASomaExpressao(pexpressaoNode2, tsomaNode3, ptermoNode4);
        }
	nodeList.add(pexpressaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ASubExpressao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressao pexpressaoNode1;
        {
            // Block
        PExpressao pexpressaoNode2;
        TSub tsubNode3;
        PTermo ptermoNode4;
        pexpressaoNode2 = (PExpressao)nodeArrayList1.get(0);
        tsubNode3 = (TSub)nodeArrayList2.get(0);
        ptermoNode4 = (PTermo)nodeArrayList3.get(0);

        pexpressaoNode1 = new ASubExpressao(pexpressaoNode2, tsubNode3, ptermoNode4);
        }
	nodeList.add(pexpressaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AFatorTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermo ptermoNode1;
        {
            // Block
        PFator pfatorNode2;
        pfatorNode2 = (PFator)nodeArrayList1.get(0);

        ptermoNode1 = new AFatorTermo(pfatorNode2);
        }
	nodeList.add(ptermoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AMultTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermo ptermoNode1;
        {
            // Block
        PTermo ptermoNode2;
        TMult tmultNode3;
        PFator pfatorNode4;
        ptermoNode2 = (PTermo)nodeArrayList1.get(0);
        tmultNode3 = (TMult)nodeArrayList2.get(0);
        pfatorNode4 = (PFator)nodeArrayList3.get(0);

        ptermoNode1 = new AMultTermo(ptermoNode2, tmultNode3, pfatorNode4);
        }
	nodeList.add(ptermoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce ADivTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermo ptermoNode1;
        {
            // Block
        PTermo ptermoNode2;
        TDiv tdivNode3;
        PFator pfatorNode4;
        ptermoNode2 = (PTermo)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        pfatorNode4 = (PFator)nodeArrayList3.get(0);

        ptermoNode1 = new ADivTermo(ptermoNode2, tdivNode3, pfatorNode4);
        }
	nodeList.add(ptermoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AIdFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFator pfatorNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pfatorNode1 = new AIdFator(tidNode2);
        }
	nodeList.add(pfatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AInteiroFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFator pfatorNode1;
        {
            // Block
        TInteiro tinteiroNode2;
        tinteiroNode2 = (TInteiro)nodeArrayList1.get(0);

        pfatorNode1 = new AInteiroFator(tinteiroNode2);
        }
	nodeList.add(pfatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce ARealFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFator pfatorNode1;
        {
            // Block
        TReal trealNode2;
        trealNode2 = (TReal)nodeArrayList1.get(0);

        pfatorNode1 = new ARealFator(trealNode2);
        }
	nodeList.add(pfatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AParentesesFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFator pfatorNode1;
        {
            // Block
        TAPar taparNode2;
        PExpressao pexpressaoNode3;
        TFPar tfparNode4;
        taparNode2 = (TAPar)nodeArrayList1.get(0);
        pexpressaoNode3 = (PExpressao)nodeArrayList2.get(0);
        tfparNode4 = (TFPar)nodeArrayList3.get(0);

        pfatorNode1 = new AParentesesFator(taparNode2, pexpressaoNode3, tfparNode4);
        }
	nodeList.add(pfatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce ATerminal$VarDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PVarDeclaracao pvardeclaracaoNode1;
        pvardeclaracaoNode1 = (PVarDeclaracao)nodeArrayList1.get(0);
	if(pvardeclaracaoNode1 != null)
	{
	  listNode2.add(pvardeclaracaoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce ANonTerminal$VarDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PVarDeclaracao pvardeclaracaoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvardeclaracaoNode2 = (PVarDeclaracao)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvardeclaracaoNode2 != null)
	{
	  listNode3.add(pvardeclaracaoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ATerminal$ConstDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PConstDeclaracao pconstdeclaracaoNode1;
        pconstdeclaracaoNode1 = (PConstDeclaracao)nodeArrayList1.get(0);
	if(pconstdeclaracaoNode1 != null)
	{
	  listNode2.add(pconstdeclaracaoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce ANonTerminal$ConstDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PConstDeclaracao pconstdeclaracaoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pconstdeclaracaoNode2 = (PConstDeclaracao)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pconstdeclaracaoNode2 != null)
	{
	  listNode3.add(pconstdeclaracaoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {1, SHIFT, 1}, },
			{{-1, ERROR, 1}, {0, SHIFT, 4}, },
			{{-1, ERROR, 2}, {54, ACCEPT, -1}, },
			{{-1, REDUCE, 2}, {4, SHIFT, 5}, {5, SHIFT, 6}, {6, SHIFT, 7}, {7, SHIFT, 8}, },
			{{-1, ERROR, 4}, {2, SHIFT, 15}, },
			{{-1, ERROR, 5}, {0, SHIFT, 16}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 19}, {0, SHIFT, 17}, {8, SHIFT, 18}, {9, SHIFT, 19}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 11}, {46, SHIFT, 23}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 3}, {4, SHIFT, 5}, {5, SHIFT, 6}, {6, SHIFT, 7}, {7, SHIFT, 8}, },
			{{-1, REDUCE, 4}, {4, SHIFT, 5}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 16}, {26, SHIFT, 27}, {27, SHIFT, 28}, {28, SHIFT, 29}, },
			{{-1, ERROR, 17}, {39, SHIFT, 31}, },
			{{-1, ERROR, 18}, {48, SHIFT, 32}, },
			{{-1, ERROR, 19}, {48, SHIFT, 33}, },
			{{-1, ERROR, 20}, {3, SHIFT, 34}, },
			{{-1, REDUCE, 18}, {47, SHIFT, 35}, },
			{{-1, ERROR, 22}, {47, SHIFT, 36}, },
			{{-1, ERROR, 23}, {0, SHIFT, 37}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 5}, {4, SHIFT, 5}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 30}, {47, SHIFT, 40}, },
			{{-1, ERROR, 31}, {0, SHIFT, 41}, {26, SHIFT, 42}, {28, SHIFT, 43}, {48, SHIFT, 44}, },
			{{-1, ERROR, 32}, {0, SHIFT, 37}, },
			{{-1, ERROR, 33}, {0, SHIFT, 41}, {26, SHIFT, 42}, {28, SHIFT, 43}, {48, SHIFT, 44}, },
			{{-1, ERROR, 34}, {44, SHIFT, 51}, },
			{{-1, ERROR, 35}, {0, SHIFT, 17}, {8, SHIFT, 18}, {9, SHIFT, 19}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 12}, {50, SHIFT, 53}, },
			{{-1, ERROR, 38}, {45, SHIFT, 54}, {47, SHIFT, 55}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 44}, {0, SHIFT, 41}, {26, SHIFT, 42}, {28, SHIFT, 43}, {48, SHIFT, 44}, },
			{{-1, REDUCE, 22}, {29, SHIFT, 57}, {30, SHIFT, 58}, },
			{{-1, REDUCE, 27}, {31, SHIFT, 59}, {32, SHIFT, 60}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 48}, {45, SHIFT, 54}, {49, SHIFT, 61}, },
			{{-1, ERROR, 49}, {45, SHIFT, 62}, {49, SHIFT, 63}, },
			{{-1, REDUCE, 25}, {29, SHIFT, 57}, {30, SHIFT, 58}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 52}, {47, SHIFT, 64}, },
			{{-1, ERROR, 53}, {26, SHIFT, 65}, },
			{{-1, ERROR, 54}, {0, SHIFT, 37}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 56}, {29, SHIFT, 57}, {30, SHIFT, 58}, {49, SHIFT, 67}, },
			{{-1, ERROR, 57}, {0, SHIFT, 41}, {26, SHIFT, 42}, {28, SHIFT, 43}, {48, SHIFT, 44}, },
			{{-1, ERROR, 58}, {0, SHIFT, 41}, {26, SHIFT, 42}, {28, SHIFT, 43}, {48, SHIFT, 44}, },
			{{-1, ERROR, 59}, {0, SHIFT, 41}, {26, SHIFT, 42}, {28, SHIFT, 43}, {48, SHIFT, 44}, },
			{{-1, ERROR, 60}, {0, SHIFT, 41}, {26, SHIFT, 42}, {28, SHIFT, 43}, {48, SHIFT, 44}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 62}, {0, SHIFT, 41}, {26, SHIFT, 42}, {28, SHIFT, 43}, {48, SHIFT, 44}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 65}, {51, SHIFT, 73}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 28}, {31, SHIFT, 59}, {32, SHIFT, 60}, },
			{{-1, REDUCE, 29}, {31, SHIFT, 59}, {32, SHIFT, 60}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 26}, {29, SHIFT, 57}, {30, SHIFT, 58}, },
			{{-1, REDUCE, 13}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, },
			{{-1, 9}, },
			{{-1, 10}, {13, 24}, },
			{{-1, 11}, },
			{{-1, 38}, {32, 48}, },
			{{-1, 39}, {54, 66}, },
			{{-1, 12}, {14, 26}, {25, 26}, },
			{{-1, 30}, },
			{{-1, 20}, },
			{{-1, 21}, },
			{{-1, 22}, {35, 52}, },
			{{-1, 49}, },
			{{-1, 45}, {33, 50}, {44, 56}, {62, 72}, },
			{{-1, 46}, {57, 68}, {58, 69}, },
			{{-1, 47}, {59, 70}, {60, 71}, },
			{{-1, 13}, },
			{{-1, 14}, {13, 25}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'programa'",
			"expecting: id",
			"expecting: EOF",
			"expecting: id, 'fim', 'const', 'real', 'inteiro', 'caractere', 'leia', 'escreva', ';'",
			"expecting: 'inicio'",
			"expecting: ':'",
			"expecting: id, 'fim', 'leia', 'escreva', ';'",
			"expecting: id, 'fim', 'const', 'leia', 'escreva', ';'",
			"expecting: inteiro, string, real",
			"expecting: '<-'",
			"expecting: '('",
			"expecting: 'fim'",
			"expecting: 'fim', ';'",
			"expecting: ';'",
			"expecting: id, inteiro, real, '('",
			"expecting: ','",
			"expecting: id, 'leia', 'escreva'",
			"expecting: ',', ';', ')', '['",
			"expecting: ',', ';'",
			"expecting: ',', ';', ')'",
			"expecting: '+', '-', '*', '/', ',', ';', ')'",
			"expecting: '+', '-', ';'",
			"expecting: ',', ')'",
			"expecting: '+', '-', ',', ')'",
			"expecting: inteiro",
			"expecting: '+', '-', ')'",
			"expecting: ']'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 1, 5, 5, 5, 6, 3, 5, 7, 3, 7, 3, 8, 9, 10, 10, 11, 12, 13, 1, 3, 7, 7, 13, 13, 13, 13, 14, 1, 14, 15, 16, 12, 17, 18, 19, 7, 20, 20, 20, 14, 21, 20, 20, 22, 22, 23, 2, 13, 24, 1, 3, 25, 14, 14, 14, 14, 13, 14, 13, 12, 26, 19, 20, 20, 20, 20, 20, 23, 19, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
